 //ARRAYS

//Sliding window approach  
//usecases - subarray lengths 

 int left = 0 ;
  int right = 0;
  int maxlen = 0 ;
  int sum =0 ;
  while(right<a.size()){
    sum+=a[right];
    right++ ;
    if(sum==k){
      maxlen = max(maxlen,right-left);
    }
    while(sum>k){
      sum-=a[left];
      left= left +1 ;
      if(sum==k){
      maxlen = max(maxlen,right-left);
    }
    }
  }


Kadane's Algo 
//usecases - subarray sums 

 int maxSubArray(std::vector<int>& nums) {
        int maxsum = nums[0];  // Initialize with the first element
        int sum = nums[0];

        for (int i = 1; i < nums.size(); i++) {
            sum = max(nums[i], sum + nums[i]);
            maxsum = max(maxsum, sum);
        }
        return maxsum;
    }


dutch national flag  (3 pointers )
//usecases-  sorting 

void sortColors(vector<int>& nums) {
     // 3 pointers
    int low = 0;
    int high = nums.size() - 1;  // Initialize 'high' correctly
    int mid = 0;

    while (mid <= high) {  // Correct the loop condition
        if (nums[mid] == 0) {
            std::swap(nums[low], nums[mid]);
            low++;
            mid++;
        } 
        else if (nums[mid] == 1) {
            mid++;
        } 
        else if (nums[mid] == 2) {
            std::swap(nums[mid], nums[high]);
            high--;  // Correctly decrement 'high' after swapping
        }
    }
    }

//Boyer-Moore Voting Algorithm
usecases - counting occurences     

 int majorityElement(vector<int>& nums) {
       
  int count =0 ;
  int el ;
	for(int i=0;i<nums.size();i++){
    if(count==0){
      el = nums[i] ;
      count= 1 ;
    }
    else if(nums[i]==el){
      count++ ;
    }else{
      count--;
    }
  }
  return el;  
}
